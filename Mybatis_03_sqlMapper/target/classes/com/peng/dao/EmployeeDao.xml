<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace名称空间，写接口的全类名-->
<mapper namespace="com.peng.dao.EmployeeDao">
    <!--这个文件中能写的所有标签：
    cache:缓存有关
    cache-ref：缓存有关
    select、update、delete、insert
    parameterMap：参数map：废弃的
    resultMap：结果映射，自定义结果集的封装规则
    sql：抽取可重用的sql
    databaseId：指定这个crud属于哪个数据库的
    -->


    <!--public Employee getEmpById(Integer id);
    resultType:指定方法运行后的返回值类型：查询方法必须指定-->
    <select id="getEmpById" resultType="com.peng.bean.Employee">
    select * from t_employee where id = #{id}
  </select>

    <!--public Employee getEmpByIdAndEmpName(Integer id,String empName);-->
    <!--现象：
        1.单个参数
            基本类型：
                取值：#{参数名}
            传入pojo：
        2.多个参数
            public Employee getEmpByIdAndEmpName(Integer id,String empName)
            取值#{参数名}是无效了
            可用：0,1{参数的索引}或者param1......paramN
            原因：只要传入了多个参数，
            mybatis会自动将这些参数封装在一个map中，
            封装时使用的key就是参数的索引和参数的第几个标识
            Map<String,Object>map=new HashMap<>();
            map.put("1",传入的值),map.put("2",传入的值)
            #{key}就是从这个map中取值

        3.@param:为参数指定key：命名参数，推荐
            我们可以告诉mybatis，封装参数map的时候使用指定的key

        4.传入了map
            将多个要使用的参数封装起来
            取值,#{key}
        5.传入了pojo（javabean）
            取值：#{pojo的属性名}

        扩展：多个参数：自动封装map
        method01(@param("id")Integer id,String empName.Employee employee)
        Integer id->#{id}
        String empName->#{param2}
        Employee employee(取出里面的email)->#{param3.email()}

        无论传入什么参数都要能正确的取出值；
        #{key/属性名}

        在mybatis中，两种取值方式：
        #{属性名}：
        是参数预编译的方式，参数的位置都是用?代替，
        参数都是后面预编译进去的，安全
        ${属性名}:
        不是参数预编译，而是直接和sql语句进行拼串
        不安全，有sql注入问题
    -->
    <select id="getEmpByIdAndEmpName" resultType="com.peng.bean.Employee">
        <!--select * from t_employee where id=#{param1} and empname=#{param2}-->
        select * from t_employee where id=#{id} and empname=#{empName}
    </select>

    <!-- public Employee getEmployeeByIdAndEmpName(Map<String,Object> map);-->
    <select id="getEmployeeByIdAndEmpName" resultType="com.peng.bean.Employee">
        select * from t_employee where id=#{id} and empname=#{empName}
    </select>

    <!--public List<Employee> getAllEmps();
    resultType="",如果返回的是集合，写的是集合里面元素的类型
    -->
    <select id="getAllEmps" resultType="com.peng.bean.Employee">
        select * from t_employee
    </select>

    <!--public Map<String,Object> getEmpByIdReturnMap(Integer id);-->
    <!--查询返回一个map-->
    <select id="getEmpByIdReturnMap" resultType="map">
        select * from t_employee where id=#{id}
    </select>

    <!--查询多个返回一个map:
    查询多个的情况下，集合里面写元素类型-->
    <!--public Map<String,Employee> getAllEmpsReturnMap();-->
    <select id="getAllEmpsReturnMap" resultType="com.peng.bean.Employee">
        select * from t_employee
    </select>

    <!--public int updateEmplpyee(Employee employee);-->
    <update id="updateEmployee">
        update t_employee
        set
        empname=#{empName},
        gender=#{gender},
        email=#{email}
        where id=#{id}
    </update>

    <!--public boolean deleteEmplpyee(Employee employee);-->
    <delete id="deleteEmployee">
        delete from t_employee
        where id=#{id}
    </delete>

    <!-- public int insertEmplpyee(Employee employee);-->
    <!--让mybatis自动将自增的id赋值给employee对象的id属性
        useGeneratedKeys="true":原生jdbc获取自增主键的方法
        keyProperty="id"：将刚才自增的id封装给哪个属性
    -->
    <insert id="insertEmployee" useGeneratedKeys="true" keyProperty="id">
        insert into t_employee(empname,email,gender)
        values(#{empName},#{email},#{gender})
    </insert>
</mapper>